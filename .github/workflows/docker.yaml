---

name: 'Docker'


on:
  workflow_call:
    inputs:
      DOCKER_BUILD_REGISTRY:
        default: "ghcr.io"
        description: Registry where build image will live
        required: false
        type: string
      DOCKER_BUILD_IMAGE_NAME:
        default: "${{ github.repository }}"
        description: Docker image name for building image
        required: false
        type: string
      DOCKER_BUILD_IMAGE_TAG:
        default: "${{ github.sha }}"
        description: Docker image tag for building image
        required: false
        type: string
      DOCKER_FILE:
        default: "dockerfile"
        description: Path to the dockerfile
        required: false
        type: string
      DOCKER_LABEL_ARTIFACTHUB_MAINTAINER:
        default: '[{"name":"No Fuss Computing","email":"helpdesk@nofusscomputing.com"}]'
        description: Artifact hub Maintainer
        required: false
        type: string
      DOCKER_LABEL_ARTIFACTHUB_README:
        default: 'https://raw.githubusercontent.com/${{ github.repository }}/development/README.md'
        description: Artifact hub ReadMe
        required: false
        type: string
      DOCKER_PUBLISH_REGISTRY:
        default: "docker.io"
        description: Registry where image will be published to
        required: false
        type: string
      DOCKER_PUBLISH_IMAGE_NAME:
        default: "${{ github.repository }}"
        description: Docker image name for publishing the image
        required: false
        type: string
      DOCKER_SCAN_IMAGE_VULNERABILITY:
        default: true
        description: Scan Image with Trivy
        required: false
        type: boolean
      DOCKER_TAG_IMAGE_TAG_SOURCE:
        default: "${{ github.sha }}"
        description: Docker image tag Used for source Image to tag
        required: false
        type: string
      DOCKER_TAG_IMAGE_TAG_LATEST:
        default: true
        description: Create image with tag 'Latest'
        required: false
        type: boolean
      DOCKER_TAG_IMAGE_TAG_SHA:
        default: true
        description: Create image with tag that is the git commit
        required: false
        type: boolean
    secrets:
      DOCKER_PUBLISH_USERNAME:
        description: Publish Docker registry username
        required: true
      DOCKER_PUBLISH_PASSWORD:
        description: Publish Docker registry username
        required: true


permissions:
  pull-requests: write
  contents: write
  actions: read
  checks: write
  packages: write
  security-events: write
  statuses: write
  id-token: write
  attestations: write

jobs:

  docker-build:
    if:
      (${{
        github.event.push
          ||
        github.ref_type == 'tag'
      }})
    runs-on: ubuntu-latest
    name: Build Image
    outputs:
      build-image-digest: ${{ steps.image-digest.outputs.value-out }}
    steps:



      - name: Debug
        run: |
          echo "${{ github.event.pull_request.head.repo.full_name || github.repository }}";
          echo "**************************";
          echo "${{ github.event.pull_request.head.repo.full_name }}";
          echo "**************************";
          echo "${{ github.repository }}";
          echo "**************************";
          echo "${{ github.event.pull_request.head.repo }}";
          echo "**************************";
          echo "${{ github.event.push }}";
          echo "**************************";
      - uses: actions/checkout@v4


      - name: Log into registry ${{ inputs.DOCKER_BUILD_REGISTRY }}
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ inputs.DOCKER_BUILD_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}


      - name: Setup BuildX
        run: |
          docker buildx create --name project-v3-builder;
          docker buildx use project-v3-builder;


      - name: build image
        run: |
          docker buildx build --platform="linux/amd64,linux/arm64" . \
            --label "org.opencontainers.image.created=$(date '+%Y-%m-%dT%H:%M:%S%:z')" \
            --label "org.opencontainers.image.source=https://github.com/${{ github.repository }}" \
            --label "org.opencontainers.image.revision=${{ github.sha }}" \
            \
            --label "io.artifacthub.package.readme-url=${{ inputs.DOCKER_LABEL_ARTIFACTHUB_README }}" \
            --label 'io.artifacthub.package.maintainers=${{ inputs.DOCKER_LABEL_ARTIFACTHUB_MAINTAINER }}' \
            \
            --annotation "org.opencontainers.image.description=a DESCRIPTION for multi-arch images" \
            --annotation "org.opencontainers.image.created=$(date '+%Y-%m-%dT%H:%M:%S%:z')" \
            --annotation "org.opencontainers.image.source=https://github.com/${{ github.repository }}" \
            --annotation "org.opencontainers.image.revision=${{ github.sha }}" \
            \
            --build-arg CI_PROJECT_URL=https://github.com/${{ github.repository }} \
            --build-arg CI_COMMIT_SHA=${{ github.sha }} \
            --build-arg CI_COMMIT_TAG=${{ github.ref_name }} \
          --push \
          --file ${{ inputs.DOCKER_FILE }} \
          --tag ${{ inputs.DOCKER_BUILD_REGISTRY }}/${{ inputs.DOCKER_BUILD_IMAGE_NAME }}:${{ inputs.DOCKER_BUILD_IMAGE_TAG }};


      - name: Remove "Unknown" Image from Manifest - development branch
        if: ${{ github.ref_name == 'development' }}
        run: |

          DOCKER_MULTI_ARCH_IMAGES=$(docker buildx imagetools inspect "${{ inputs.DOCKER_BUILD_REGISTRY }}/${{ inputs.DOCKER_BUILD_IMAGE_NAME }}:${{ inputs.DOCKER_BUILD_IMAGE_TAG }}" --format "{{ range .Manifest.Manifests }}{{ if ne (print .Platform) \"&{unknown unknown  [] }\" }}${{ inputs.DOCKER_BUILD_REGISTRY }}/${{ inputs.DOCKER_BUILD_IMAGE_NAME }}:${{ inputs.DOCKER_BUILD_IMAGE_TAG }}@{{ println .Digest }}{{end}} {{end}}");

          docker buildx imagetools create $DOCKER_MULTI_ARCH_IMAGES \
            --tag ${{ inputs.DOCKER_BUILD_REGISTRY }}/${{ inputs.DOCKER_BUILD_IMAGE_NAME }}:${{ inputs.DOCKER_BUILD_IMAGE_TAG }} \
            --tag ${{ inputs.DOCKER_BUILD_REGISTRY }}/${{ inputs.DOCKER_BUILD_IMAGE_NAME }}:dev;


      - name: Remove "Unknown" Image from Manifest - other branches
        if: ${{ github.ref_name != 'development' }}
        run: |

          DOCKER_MULTI_ARCH_IMAGES=$(docker buildx imagetools inspect "${{ inputs.DOCKER_BUILD_REGISTRY }}/${{ inputs.DOCKER_BUILD_IMAGE_NAME }}:${{ inputs.DOCKER_BUILD_IMAGE_TAG }}" --format "{{ range .Manifest.Manifests }}{{ if ne (print .Platform) \"&{unknown unknown  [] }\" }}${{ inputs.DOCKER_BUILD_REGISTRY }}/${{ inputs.DOCKER_BUILD_IMAGE_NAME }}:${{ inputs.DOCKER_BUILD_IMAGE_TAG }}@{{ println .Digest }}{{end}} {{end}}");

          docker buildx imagetools create $DOCKER_MULTI_ARCH_IMAGES \
            --tag ${{ inputs.DOCKER_BUILD_REGISTRY }}/${{ inputs.DOCKER_BUILD_IMAGE_NAME }}:${{ inputs.DOCKER_BUILD_IMAGE_TAG }};


      - name: Fetch image
        run: |
          docker pull ${{ inputs.DOCKER_BUILD_REGISTRY }}/${{ inputs.DOCKER_BUILD_IMAGE_NAME }}:${{ inputs.DOCKER_BUILD_IMAGE_TAG }} >> /dev/null;


      - name: Fetch Manifest digest
        id: image-digest
        run: |
          echo "value-out=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ inputs.DOCKER_BUILD_REGISTRY }}/${{ inputs.DOCKER_BUILD_IMAGE_NAME }}:${{ inputs.DOCKER_BUILD_IMAGE_TAG }} | cut -d '@' -f 2)" >> $GITHUB_OUTPUT


      - name: Attest
        if: ${{
            github.ref_name == 'development'
              ||
            github.ref_name == 'master'
              ||
            github.ref_type == 'tag'
          }}
        uses: actions/attest-build-provenance@v1
        id: image-attest
        with:
          subject-name: ${{ inputs.DOCKER_BUILD_REGISTRY }}/${{ inputs.DOCKER_BUILD_IMAGE_NAME }}
          subject-digest: ${{ steps.image-digest.outputs.value-out }}
          push-to-registry: true


      - name: Upload Image Attestation Artifact
        if: ${{
            github.ref_name == 'development'
              ||
            github.ref_name == 'master'
              ||
            github.ref_type == 'tag'
          }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.DOCKER_BUILD_REGISTRY }}-attestation-image
          path: ${{ steps.image-attest.outputs.bundle-path }}


      - name: Cleanup BuildX
        run: |
          docker buildx rm project-v3-builder;



  docker-scan-vulnerability:
    if:
      (${{
        (
          github.event.push
            ||
          github.ref_type == 'tag'
        )
          &&
        inputs.DOCKER_SCAN_IMAGE_VULNERABILITY
      }})

    needs:
      - docker-build
    runs-on: ubuntu-latest
    name: Vulnerability Scan
    steps:
      - uses: actions/checkout@v4


      - name: Dummy Task
        if:
          (${{
            inputs.DOCKER_SCAN_IMAGE_VULNERABILITY == false
          }})
        run: |
          echo "Scanning image turned off.This Job does nothing however as 'docker-scan-vulnerability' is a dependency job, must do something.";


      - name: Log into registry ${{ inputs.DOCKER_BUILD_REGISTRY }}
        if:
          (${{
            inputs.DOCKER_SCAN_IMAGE_VULNERABILITY
          }})
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ inputs.DOCKER_BUILD_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}


      - name: Run Trivy vulnerability scanner (sarif Report)
        if:
          (${{
            inputs.DOCKER_SCAN_IMAGE_VULNERABILITY
          }})
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: '${{ inputs.DOCKER_BUILD_REGISTRY }}/${{ inputs.DOCKER_BUILD_IMAGE_NAME }}:${{ inputs.DOCKER_BUILD_IMAGE_TAG }}'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'LOW,MEDIUM,HIGH,CRITICAL'
          vuln-type: 'os,library'
          scanners: vuln
          ignore-unfixed: true


      - name: Create Draft GH Release
        if: ${{ github.ref_type == 'tag' }}
        uses: softprops/action-gh-release@v2
        with:
          name:  ${{ github.ref_name }}
          tag_name:  ${{ github.ref_name }}
          draft: true
          files: |
            trivy-results.sarif


      - name: Upload Trivy scan results to GitHub Security tab
        if:
          (${{
            inputs.DOCKER_SCAN_IMAGE_VULNERABILITY
          }})
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'


      - name: Run Trivy vulnerability scanner (json Report)
        if:
          (${{
            inputs.DOCKER_SCAN_IMAGE_VULNERABILITY
          }})
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: '${{ inputs.DOCKER_BUILD_REGISTRY }}/${{ inputs.DOCKER_BUILD_IMAGE_NAME }}:${{ inputs.DOCKER_BUILD_IMAGE_TAG }}'
          format: 'json'
          output: 'scan-results.json'
          severity: 'LOW,MEDIUM,HIGH,CRITICAL'
          vuln-type: 'os,library'
          scanners: vuln
          ignore-unfixed: false

      - name: Upload scan results
        if:
          (${{
            inputs.DOCKER_SCAN_IMAGE_VULNERABILITY
          }})
        uses: actions/upload-artifact@v4
        with:
          name: container-scan-results-json
          path: scan-results.json


      - run: |
          ls -la

      - name: Create Vulnerabilities (Critical/High)
        if:
          (${{
            inputs.DOCKER_SCAN_IMAGE_VULNERABILITY
          }})
        run: |
          echo "[Debug] jq -r '.Results'=$(jq -r '.Results' scan-results.json)";

          if [ "$(jq -r '.Results' scan-results.json)" != 'null' ] && [ "0$(jq -r '.Results' scan-results.json)" != '0' ]; then

            not_empty="$(jq -r '.Results[] | .Vulnerabilities[]' scan-results.json)";

          else

            not_empty="";

          fi

          echo "[Debug] not_empty=${not_empty}";


          jq -r '
          [
          "# Image Scan Results",
          "",
          "**Scan Date:** _" + ( .CreatedAt // "" ) + "_",
          "**Image:** _" + ( .ArtifactName // "" ) + "_",
          "**OS:** _" + ( .Metadata.OS.Family // "" ) + " " + ( .Metadata.OS.Name // "" ) + "_",
          ""
          ] | join("\n")
          ' scan-results.json > vulnerability-report.md

          if [ "$not_empty" ]; then
            jq -r '
            def hr(severity):
            if severity == "HIGH" or severity == "CRITICAL" then true else false end;
            def to_md:
            "| " + (.VulnerabilityID // "") + " | " + (.PkgName // "") + " | " + (.InstalledVersion // "") + " | " + (.Severity // "") + " | " + (.Title // "") + " |";
            [
            "## High and Critical Vulnerabilities",
            "",
            "| Vulnerability ID | Package | Version | Severity | Description |",
            "| --------- | ----- | ----- | ----- | -------|",
            (.Results[] | .Vulnerabilities[] | select(hr(.Severity)) | to_md),
            ""
            ] | join("\n")
            ' scan-results.json >> vulnerability-report.md

          else

            echo "**Nothing Found**" >> vulnerability-report.md

          fi;



      - name: Create Full Vulnerabilities
        if:
          (${{
            inputs.DOCKER_SCAN_IMAGE_VULNERABILITY
          }})
        run: |
          echo "[Debug] jq -r '.Results'=$(jq -r '.Results' scan-results.json)";

          if [ "$(jq -r '.Results' scan-results.json)" != 'null' ] && [ "0$(jq -r '.Results' scan-results.json)" != '0' ]; then

            not_empty="$(jq -r '.Results[] | .Vulnerabilities[]' scan-results.json)";

          else

            not_empty="";

          fi

          echo "[Debug] not_empty=${not_empty}";


          jq -r '
          [
          "# Full Image Scan Results",
          "",
          "**Scan Date:** _" + ( .CreatedAt // "" ) + "_",
          "**Image:** _" + ( .ArtifactName // "" ) + "_",
          "**OS:** _" + ( .Metadata.OS.Family // "" ) + " " + ( .Metadata.OS.Name // "" ) + "_",
          ""
          ] | join("\n")
          ' scan-results.json > full-vulnerability-report.md

          if [ "$not_empty" ]; then
            jq -r '
            def hr(severity):
            if severity == "HIGH" or severity == "CRITICAL" then true else false end;
            def to_md:
            "| " + (.VulnerabilityID // "") + " | " + (.PkgName // "") + " | " + (.InstalledVersion // "") + " | " + (.Severity // "") + " | " + (.Title // "") + " |";
            [
            "## Vulnerabilities",
            "",
            "| Vulnerability ID | Package | Version | Severity | Description |",
            "| --------- | ----- | ----- | ----- | -------|",
            (.Results[] | .Vulnerabilities[] | select(.Severity) | to_md),
            ""
            ] | join("\n")
            ' scan-results.json >> full-vulnerability-report.md

          else

            echo "**Nothing Found**" >> full-vulnerability-report.md

          fi;


      - name: Upload scan results
        if:
          (${{
            inputs.DOCKER_SCAN_IMAGE_VULNERABILITY
          }})
        uses: actions/upload-artifact@v4
        with:
          name: docker-vulnerability-report
          path: vulnerability-report.md

      - name: Upload scan results
        if:
          (${{
            inputs.DOCKER_SCAN_IMAGE_VULNERABILITY
          }})
        uses: actions/upload-artifact@v4
        with:
          name: docker-vulnerability-report-full
          path: full-vulnerability-report.md



  docker-sbom:
    if:
      (${{
        (
          github.event.push
            ||
          github.ref_type == 'tag'
        )
      }})
    needs: 
      - docker-build
    runs-on: ubuntu-latest
    name: Image SBOM
    steps:


      - name: Scan Image
        uses: aquasecurity/trivy-action@0.20.0
        with:
          scan-type: image
          format: cyclonedx
          output: dependency-results.sbom.json
          image-ref: '${{ inputs.DOCKER_BUILD_REGISTRY }}/${{ inputs.DOCKER_BUILD_IMAGE_NAME }}:${{ inputs.DOCKER_BUILD_IMAGE_TAG }}'
          scan-ref: .
          ignore-unfixed: false
          vuln-type: os,library
          severity: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
          list-all-pkgs: false


      - name: Upload SBOM as a Github artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-sbom-report
          path: '${{ github.workspace }}/dependency-results.sbom.json'


      - name: Create Draft GH Release
        if: ${{ github.ref_type == 'tag' }}
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.ref_name }}
          tag_name:  ${{ github.ref_name }}
          draft: true
          files: |
            dependency-results.sbom.json

      - name: Log into registry ${{ inputs.DOCKER_BUILD_REGISTRY }}
        if: ${{
            github.ref_name == 'development'
              ||
            github.ref_name == 'master'
              ||
            github.ref_type == 'tag'
          }}
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ inputs.DOCKER_BUILD_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}


      - name: Generate SBOM Attestation
        if: ${{
            github.ref_name == 'development'
              ||
            github.ref_name == 'master'
              ||
            github.ref_type == 'tag'
          }}
        id: sbom-attest
        uses: actions/attest-sbom@v1
        with:
          subject-name: '${{ inputs.DOCKER_BUILD_REGISTRY }}/${{ inputs.DOCKER_BUILD_IMAGE_NAME }}'
          subject-digest: ${{ needs.docker-build.outputs.build-image-digest }}
          sbom-path: 'dependency-results.sbom.json'
          push-to-registry: true


      - name: Upload SBOM Attestation Artifact
        if: ${{
            github.ref_name == 'development'
              ||
            github.ref_name == 'master'
              ||
            github.ref_type == 'tag'
          }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.DOCKER_BUILD_REGISTRY }}-attestation-image-sbom
          path: ${{ steps.sbom-attest.outputs.bundle-path }}


  docker-reports:
    needs: 
      - docker-scan-vulnerability
      - docker-build
    runs-on: ubuntu-latest
    name: Create Reports
    steps:


      - name: Dummy Task
        if: ${{
            inputs.DOCKER_SCAN_IMAGE_VULNERABILITY == false
          }}
        run: |
          echo "Scanning image turned off.This Job does nothing however as 'docker-scan-vulnerability' is a dependency job, must do something.";


      - name: Fetch Scan Results
        if: ${{
            inputs.DOCKER_SCAN_IMAGE_VULNERABILITY
          }}
        uses: actions/download-artifact@v4
        with:
          name: docker-vulnerability-report-full


      - uses: dtinth/markdown-report-action@v1
        if: ${{
            inputs.DOCKER_SCAN_IMAGE_VULNERABILITY
          }}
        with:
          name: Docker Vulnerability Report
          title: Vulnerability Report
          body-file: full-vulnerability-report.md



  docker-tagged:
    if: ${{ github.ref_type == 'tag' }}
    needs: 
      - docker-scan-vulnerability
      - docker-reports
    runs-on: ubuntu-latest
    name: Tagged Image
    steps:


      - name: Log into registry ${{ inputs.DOCKER_BUILD_REGISTRY }}
        if: 
          (${{
            github.ref_type != 'tag'
          }})
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ inputs.DOCKER_BUILD_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}


      - name: Create Image Tag '${{ github.ref_name }}'
        run: |
          docker buildx imagetools create ${{ inputs.DOCKER_BUILD_REGISTRY }}/${{ inputs.DOCKER_BUILD_IMAGE_NAME }}:${{ inputs.DOCKER_TAG_IMAGE_TAG_SOURCE }} \
            --tag ${{ inputs.DOCKER_BUILD_REGISTRY }}/${{ inputs.DOCKER_BUILD_IMAGE_NAME }}:${{ github.ref_name }};


      - name: Create Image Tag 'latest'
        if: ${{ inputs.DOCKER_TAG_IMAGE_TAG_LATEST }}
        shell: bash
        run: |

          TAG_NAME=dev;

          if [ "${{ github.ref_name }}" == 'master' ]; then

            TAG_NAME=latest;

          fi

          echo "[Debug] TAG_NAME=${TAG_NAME}";

          docker buildx imagetools create ${{ inputs.DOCKER_BUILD_REGISTRY }}/${{ inputs.DOCKER_BUILD_IMAGE_NAME }}:${{ inputs.DOCKER_TAG_IMAGE_TAG_SOURCE }} \
            --tag ${{ inputs.DOCKER_BUILD_REGISTRY }}/${{ inputs.DOCKER_BUILD_IMAGE_NAME }}:${TAG_NAME};



  docker-pr-comment:
    if: ${{ github.ref_type != 'tag' }}
    needs:
      - docker-scan-vulnerability
    runs-on: ubuntu-latest
    name: PR Comment (Vulnerability)
    steps:


      - name: Fetch Vulnerability Report
        if: ${{ inputs.DOCKER_SCAN_IMAGE_VULNERABILITY }}
        uses: actions/download-artifact@v4
        with:
          name: docker-vulnerability-report


      - name: Capture scan results
        if: ${{ inputs.DOCKER_SCAN_IMAGE_VULNERABILITY }}
        run: |
          content=$(cat vulnerability-report.md | head -c 65000)
          echo "report<<EOF" >> $GITHUB_ENV
          echo "$content" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - uses: jwalton/gh-find-current-pr@v1
        id: finder

      - name: Comment scan results on PR
        if: ${{ inputs.DOCKER_SCAN_IMAGE_VULNERABILITY }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          number: ${{ steps.finder.outputs.pr }}
          header: Docker Image Scan Results
          message: |
            ${{ env.report }}



  docker-publish:
    if: ${{(
        github.ref_type == 'tag'
          ||
        github.ref_name == 'development'
      )}}
    needs: 
      - docker-build
      - docker-scan-vulnerability
      - docker-reports
    runs-on: ubuntu-latest
    name: Publish
    steps:


      - name: Log into registry ${{ inputs.DOCKER_PUBLISH_REGISTRY }}
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ inputs.DOCKER_PUBLISH_REGISTRY }}
          username: ${{ secrets.DOCKER_PUBLISH_USERNAME }}
          password: ${{ secrets.DOCKER_PUBLISH_PASSWORD }}


      - name: Tag Image with GIT Tag '${{ github.ref_name }}'
        if: ${{ github.ref_type == 'tag' }}
        run: |
          docker buildx imagetools create ${{ inputs.DOCKER_BUILD_REGISTRY }}/${{ inputs.DOCKER_BUILD_IMAGE_NAME }}:${{ inputs.DOCKER_TAG_IMAGE_TAG_SOURCE }} \
            --tag ${{ inputs.DOCKER_PUBLISH_REGISTRY }}/${{ inputs.DOCKER_PUBLISH_IMAGE_NAME }}:${{ github.ref_name }} \


      - name: Tag Image with GIT 'latest'
        if: ${{ inputs.DOCKER_TAG_IMAGE_TAG_LATEST }}
        id: tag-image
        shell: bash
        run: |
          TAG_NAME=dev;

          if [ "${{ github.ref_name }}" == 'master' ]; then

            TAG_NAME=latest;

          fi

          echo "[Debug] TAG_NAME=${TAG_NAME}";

          echo "mutable_tag_name=${TAG_NAME}" > $GITHUB_OUTPUT

          docker buildx imagetools create ${{ inputs.DOCKER_BUILD_REGISTRY }}/${{ inputs.DOCKER_BUILD_IMAGE_NAME }}:${{ inputs.DOCKER_TAG_IMAGE_TAG_SOURCE }} \
            --tag ${{ inputs.DOCKER_PUBLISH_REGISTRY }}/${{ inputs.DOCKER_PUBLISH_IMAGE_NAME }}:${TAG_NAME};


      - name: Tag Image with GIT commit '${{ inputs.DOCKER_TAG_IMAGE_TAG_SOURCE }}'
        if: ${{ inputs.DOCKER_TAG_IMAGE_TAG_SHA }}
        run: |
          docker buildx imagetools create ${{ inputs.DOCKER_BUILD_REGISTRY }}/${{ inputs.DOCKER_BUILD_IMAGE_NAME }}:${{ inputs.DOCKER_TAG_IMAGE_TAG_SOURCE }} \
            --tag ${{ inputs.DOCKER_PUBLISH_REGISTRY }}/${{ inputs.DOCKER_PUBLISH_IMAGE_NAME }}:${{ inputs.DOCKER_TAG_IMAGE_TAG_SOURCE }} \


      - name: Fetch image ${{ inputs.DOCKER_TAG_IMAGE_TAG_SOURCE }}
        if: ${{ github.ref_type == 'tag' }}
        run: |
          docker pull ${{ inputs.DOCKER_PUBLISH_REGISTRY }}/${{ inputs.DOCKER_PUBLISH_IMAGE_NAME }}:${{ inputs.DOCKER_TAG_IMAGE_TAG_SOURCE }} >> /dev/null;


      - name: Fetch image ${{ inputs.DOCKER_TAG_IMAGE_TAG_SOURCE }}
        if: ${{ github.ref_type != 'tag' }}
        run: |
          docker pull ${{ inputs.DOCKER_PUBLISH_REGISTRY }}/${{ inputs.DOCKER_PUBLISH_IMAGE_NAME }}:${{ steps.tag-image.outputs.mutable_tag_name }} >> /dev/null;


      - name: Fetch Manifest digest ${{ github.ref_name }}
        id: image-digest
        run: |
          if [ "${{ github.ref_type}}" == 'tag'  ]; then

            MANIFEST_TAG=${{ inputs.DOCKER_TAG_IMAGE_TAG_SOURCE }};
          
          else

            MANIFEST_TAG=${{ steps.tag-image.outputs.mutable_tag_name }};

          fi;

          echo "[Debug] MANIFEST_TAG=${MANIFEST_TAG}";

          echo "value-out=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ inputs.DOCKER_PUBLISH_REGISTRY }}/${{ inputs.DOCKER_PUBLISH_IMAGE_NAME }}:${MANIFEST_TAG} | cut -d '@' -f 2)" >> $GITHUB_OUTPUT


      - name: Attest ${{ github.ref_name }}
        uses: actions/attest-build-provenance@v1
        id: image-attest
        with:
          subject-name: ${{ inputs.DOCKER_PUBLISH_REGISTRY }}/${{ inputs.DOCKER_PUBLISH_IMAGE_NAME }}
          subject-digest: ${{ steps.image-digest.outputs.value-out }}
          push-to-registry: true


      - name: Upload Image Attestation Artifact ${{ github.ref_name }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.DOCKER_PUBLISH_REGISTRY }}-attestation-image-published
          path: ${{ steps.image-attest.outputs.bundle-path }}


      - name: Download SBOM as a Github artifact
        uses: actions/download-artifact@v4
        with:
          name: trivy-sbom-report


      - name: Generate SBOM Attestation (publish)
        id: sbom-attest
        uses: actions/attest-sbom@v1
        with:
          subject-name: '${{ inputs.DOCKER_PUBLISH_REGISTRY }}/${{ inputs.DOCKER_PUBLISH_IMAGE_NAME }}'
          subject-digest: ${{ needs.docker-build.outputs.build-image-digest }}
          sbom-path: 'dependency-results.sbom.json'
          push-to-registry: true


      - name: Upload SBOM Attestation Artifact (publish)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.DOCKER_PUBLISH_REGISTRY }}-attestation-image-sbom-published
          path: ${{ steps.sbom-attest.outputs.bundle-path }}


      - name: Append GH Release Body
        if: ${{ github.ref_type == 'tag' }}
        id: release
        uses: softprops/action-gh-release@v2
        with:
          append_body: true
          draft: true
          body: |
            ### Images part of this release

            The following images were built and published:

            - `docker pull ${{ inputs.DOCKER_PUBLISH_REGISTRY }}/${{ inputs.DOCKER_PUBLISH_IMAGE_NAME }}:${{ steps.tag-image.outputs.mutable_tag_name }}`
            - `docker pull ${{ inputs.DOCKER_PUBLISH_REGISTRY }}/${{ inputs.DOCKER_PUBLISH_IMAGE_NAME }}:${{ inputs.DOCKER_TAG_IMAGE_TAG_SOURCE }}`
            - `docker pull ${{ inputs.DOCKER_PUBLISH_REGISTRY }}/${{ inputs.DOCKER_PUBLISH_IMAGE_NAME }}:${{ github.ref_name }}`



  docker-release-files:
    if: ${{ github.ref_type == 'tag' }}
    needs: 
      - docker-build
      - docker-sbom
      - docker-tagged
      - docker-publish
    runs-on: ubuntu-latest
    name: Release Files
    steps:


      - name: Fetch Image Attestation Artifact - ${{ inputs.DOCKER_PUBLISH_REGISTRY }}
        if: ${{ inputs.DOCKER_PUBLISH_REGISTRY != inputs.DOCKER_BUILD_REGISTRY }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.DOCKER_PUBLISH_REGISTRY }}-attestation-image-published
          path: attestation-image/


      - 
        if: ${{ inputs.DOCKER_PUBLISH_REGISTRY != inputs.DOCKER_BUILD_REGISTRY }}
        run: |
          mv attestation-image/attestation.jsonl ${{ inputs.DOCKER_PUBLISH_REGISTRY }}-attestation-image.jsonl


      - name: Fetch SBOM Attestation Artifact - ${{ inputs.DOCKER_PUBLISH_REGISTRY }}
        if: ${{ inputs.DOCKER_PUBLISH_REGISTRY != inputs.DOCKER_BUILD_REGISTRY }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.DOCKER_PUBLISH_REGISTRY }}-attestation-image-sbom-published
          path: attestation-sbom/


      - if: ${{ inputs.DOCKER_PUBLISH_REGISTRY != inputs.DOCKER_BUILD_REGISTRY }}
        run: |
          mv attestation-sbom/attestation.jsonl ${{ inputs.DOCKER_PUBLISH_REGISTRY }}-attestation-sbom.jsonl


      - if: ${{ inputs.DOCKER_PUBLISH_REGISTRY != inputs.DOCKER_BUILD_REGISTRY }}
        run: |
          ls -la;


      - name: Create Draft GH Release
        if: ${{ github.ref_type == 'tag' }}
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          draft: true
          files: |
            ${{ inputs.DOCKER_PUBLISH_REGISTRY }}-attestation-image.jsonl
            ${{ inputs.DOCKER_PUBLISH_REGISTRY }}-attestation-sbom.jsonl


      - name: Fetch Image Attestation Artifact - ${{ inputs.DOCKER_BUILD_REGISTRY }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.DOCKER_BUILD_REGISTRY }}-attestation-image
          path: ${{ inputs.DOCKER_BUILD_REGISTRY }}-attestation-image/


      - run: |
          mv ${{ inputs.DOCKER_BUILD_REGISTRY }}-attestation-image/attestation.jsonl ${{ inputs.DOCKER_BUILD_REGISTRY }}-attestation-image.jsonl


      - name: Fetch SBOM Attestation Artifact - ${{ inputs.DOCKER_BUILD_REGISTRY }}
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.DOCKER_BUILD_REGISTRY }}-attestation-image-sbom
          path: ${{ inputs.DOCKER_BUILD_REGISTRY }}-attestation-sbom/


      - run: |
          mv ${{ inputs.DOCKER_BUILD_REGISTRY }}-attestation-sbom/attestation.jsonl ${{ inputs.DOCKER_BUILD_REGISTRY }}-attestation-sbom.jsonl


      - run: |
          ls -la;


      - name: Create Draft GH Release
        if: ${{ github.ref_type == 'tag' }}
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          draft: true
          files: |
            ${{ inputs.DOCKER_BUILD_REGISTRY }}-attestation-image.jsonl
            ${{ inputs.DOCKER_BUILD_REGISTRY }}-attestation-sbom.jsonl



  docker-release:
    if: ${{ github.ref_type == 'tag' }}
    needs:
      - docker-release-files
    name: Mark Release Live
    runs-on: ubuntu-latest
    steps:


      - name: Publish Release
        uses: grzegorzkrukowski/action-publish-github-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          token: ${{  secrets.GITHUB_TOKEN }}